trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  azureSubscription: 'MyAzureDevSubscription'
  dockerRegistryServiceConnection: 'devDockerRegistryConnection'
  imageName: 'roulette-backend'
  resourceGroup: 'roulette-dev-rg'
  kubernetesCluster: 'roulette-aks'
  namespace: 'default'
  terraformWorkingDir: 'terraform'

stages:
# ────────────────────────────────
- stage: Terraform
  displayName: 'Provision Infrastructure'
  jobs:
  - job: TerraformApply
    displayName: 'Terraform Init, Plan, Apply'
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: bash
        scriptLocation: inlineScript
        workingDirectory: $(terraformWorkingDir)
        inlineScript: |
          terraform init \
            -backend-config="resource_group_name=$(resourceGroup)" \
            -backend-config="storage_account_name=roulettestorage" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=roulette.tfstate"
          terraform plan -out=tfplan
          terraform apply -auto-approve tfplan

- stage: BuildAndPush
  displayName: 'Build and Push Backend Docker Image'
  dependsOn: Terraform
  jobs:
  - job: DockerBuild
    displayName: 'Build and Push Image to ACR'
    steps:
    - task: Docker@2
      displayName: 'Build and Push'
      inputs:
        containerRegistry: $(dockerRegistryServiceConnection)
        repository: $(imageName)
        command: buildAndPush
        Dockerfile: backend/Dockerfile
        tags: |
          latest

- stage: SecurityScan
  displayName: 'Trivy Security Scan (Optional)'
  dependsOn: BuildAndPush
  jobs:
  - job: TrivyScan
    displayName: 'Run Trivy on Backend Image'
    steps:
    - script: |
        curl -sSfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
        ./trivy image roulette-backend:latest || true
      displayName: 'Trivy Image Vulnerability Scan'

- stage: Deploy
  displayName: 'Deploy Backend to AKS'
  dependsOn: BuildAndPush
  jobs:
  - job: DeployBackend
    displayName: 'kubectl apply backend manifests'
    steps:
    - task: Kubernetes@1
      displayName: 'Deploy Backend to AKS'
      inputs:
        connectionType: 'Azure Resource Manager'
        azureSubscription: $(azureSubscription)
        azureResourceGroup: $(resourceGroup)
        kubernetesCluster: $(kubernetesCluster)
        namespace: $(namespace)
        command: apply
        arguments: '-f k8s/backend-deployment.yaml -f k8s/backend-service.yaml'
