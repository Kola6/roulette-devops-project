trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  dockerRegistryServiceConnection: 'devDockerRegistryConnection'
  imageName: 'roulette-backend'
  azureSubscription: 'MyAzureDevSubscription'
  resourceGroup: 'roulette-dev-rg'
  kubernetesCluster: 'roulette-aks'
  namespace: 'default'
  kvName: 'roulette-kv'

jobs:

- job: TerraformBackend
  displayName: 'Terraform Init, Plan & Apply'
  steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          cd terraform
          terraform init \
            -backend-config="resource_group_name=roulette-dev-rg" \
            -backend-config="storage_account_name=roulettestorage" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=roulette.tfstate"
          terraform apply -auto-approve

- job: BuildTestBackend
  dependsOn: TerraformBackend
  displayName: 'Build & Test Backend'
  steps:
    - task: Docker@2
      inputs:
        containerRegistry: $(dockerRegistryServiceConnection)
        repository: $(imageName)
        command: build
        Dockerfile: backend/Dockerfile
        tags: latest

    - script: |
        docker run --rm roulette-backend:latest npm test
      displayName: 'Run Backend Tests'

- job: CreateBackendSecret
  dependsOn: BuildTestBackend
  displayName: 'Retrieve DB Password from Key Vault'
  steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          DB_PASSWORD=$(az keyvault secret show --vault-name $(kvName) --name db-password --query value -o tsv)
          echo "##vso[task.setvariable variable=DB_PASSWORD;issecret=true]$DB_PASSWORD"

- job: DeployBackend
  dependsOn: CreateBackendSecret
  displayName: 'Deploy Backend to AKS'
  steps:
    - task: Kubernetes@1
      inputs:
        connectionType: 'Azure Resource Manager'
        azureSubscription: $(azureSubscription)
        azureResourceGroup: $(resourceGroup)
        kubernetesCluster: $(kubernetesCluster)
        namespace: $(namespace)
        command: apply
        arguments: '-f k8s/backend-deployment.yaml'
